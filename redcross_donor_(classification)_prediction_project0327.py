# -*- coding: utf-8 -*-
"""Redcross donor (Classification) Prediction Project0327.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13uWR3qh6R5pWo9Pptzkyn9KvcasRtynu
"""

#Code snippet 0
#installing pycaret
!pip install -U --pre pycaret

#code snippet 1
#import dataset
import pandas as pd
df = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vQzBYWDif8AqH47QpdaMsxZ0d3aXafgvL6EfnsUk6iN5QPCgrhvEky7hzI16iyfL3L2rfec3QX32JQj/pub?gid=0&single=true&output=csv')
df

#code snippet 2
# Libraries to help with reading and manipulating data
import numpy as np
import random
import requests
from io import StringIO

#Code snippet 3
# Setting Zip as integer to remove decimal then converting it to string with 5 places
df = df[df['DonorPostalCode'].notna()]
df['DonorPostalCode'] = df['DonorPostalCode'].astype('int').astype(str).str.zfill(5)

#code snippet 4
#installing zipcodes to map postal codes to regions
!pip install zipcodes

#code snippet 5
#importing zipcodes to map postal codes to states and cities
import zipcodes

# Iterate through the zip column in df2
for index, row in df.iterrows():
    zipcode = row["DonorPostalCode"]

    # Get zipcode details
    zipcode_data = zipcodes.matching(zipcode)

    # Extract state and city if found
    if zipcode_data:
        state = zipcode_data[0]['state']
        city = zipcode_data[0]['city']
    else:
        state = "None"
        city = "None"

    df.loc[index, "STATE"] = state
    df.loc[index, "CITY"] = city # Adding city information as well

#code snippet 6
#showing results
df[['DonorPostalCode','CITY', 'STATE']]

#code snippet 7
#prompt: for columns 'LastFiscalYearDonation', 'Donation2FiscalYearsAgo','Donation3FiscalYearsAgo','Donation4FiscalYearsAgo','Donation5FiscalYearsAgo','CurrentFiscalYearDonation', drop the decimal point, and the $ in front

columns_to_clean = ['LastFiscalYearDonation', 'Donation2FiscalYearsAgo',
                   'Donation3FiscalYearsAgo', 'Donation4FiscalYearsAgo',
                   'Donation5FiscalYearsAgo', 'CurrentFiscalYearDonation']

for column in columns_to_clean:
  df[column] = df[column].str.replace('$', '', regex=False)
  df[column] = df[column].str.replace('.00', '', regex=False)
  df[column] = pd.to_numeric(df[column], errors='coerce')
  df[column] = df[column].fillna(0).astype(int)
df

# Code snippet 8
#prompt: for column CumulativeDonationAmount, drop the decimal point

df['CumulativeDonationAmount'] = df['CumulativeDonationAmount'].astype(str).str.replace('.', '')

#code snippet 9
# prompt: for column 'WealthRating', map 1 for '$1-$24,999', 2 for '$25,000-$49,999', 3 for $50,000-$99,999, 4 for $100,000-$249,999, 5 for $250,000-$499,999, 6 for $500,000-$999,999, 7 for $1,000,000-$2,499,999, 8 for $2,500,000-$4,999,999

# Create a mapping dictionary for WealthRating
wealth_rating_mapping = {
    '$1-$24,999': 1,
    '$25,000-$49,999': 2,
    '$50,000-$99,999': 3,
    '$100,000-$249,999': 4,
    '$250,000-$499,999': 5,
    '$500,000-$999,999': 6,
    '$1,000,000-$2,499,999': 7,
    '$2,500,000-$4,999,999': 8
}

# Map the WealthRating column using the mapping dictionary
df['WealthRating'] = df['WealthRating'].map(wealth_rating_mapping)

df['WealthRating'].unique()

#code snippet 10
#setting the target variable
target = 'DonorIndicatorFlag.'

#code snippet 11
#setting the noise/redundant variables
ignored_columns= ['DonorUniqueId','DonorPostalCode','DonorDateOfBirth','CumulativeDonationAmount' ,'IsMemberFlag'      ]

#code snippet 12
#setting the numerical variables
numeric_columns = ['DonorAge','ConsecutiveDonorYears', 'LastFiscalYearDonation', 'Donation2FiscalYearsAgo',
       'Donation3FiscalYearsAgo', 'Donation4FiscalYearsAgo',
       'Donation5FiscalYearsAgo', 'CurrentFiscalYearDonation'  ]

#code snippet 13
#setting the categorical variables
categorical_columns = ['MaritalStatus','GenderIdentity',  'IsAlumnusFlag', 'IsParentFlag',
       'HasInvolvementFlag', 'WealthRating', 'AcademicDegreeLevel',
       'PreferredAddressType', 'HasEmailFlag','CITY', 'STATE']

#code snippet 14
#importing classification libraries
from pycaret.classification import *

#code snippet 15
#setting /configuring pycaret model
classificaiton_setup = setup(data = df, target = target,
                              ignore_features = ignored_columns,
                              numeric_features = numeric_columns,
                             categorical_features = categorical_columns)

#code snippet 16
#invoking ML alo
compare_models()

#code snippet 17
#creating the model with best algo(accurac plus best precision)
best_model = create_model('lr')

#code snippet 18
#displaying confusion matrix
plot_model(best_model, plot = 'confusion_matrix')

#code snippet 19
# predicting the donor flag status
donor_predictions= predict_model(best_model,df)

#code snippet 20
#exporting prediction result to csv
donor_predictions.to_csv("redcross donation predictions(lr).csv")